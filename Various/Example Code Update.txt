 Service:

public static async Task<Product> UpdateProduct(string conString, Product productUpdated)
        {
            Product productCurrent = await GetProduct(conString, productUpdated.ProductID);
            productUpdated.ProductID = productUpdated.ProductID != 0 ? productUpdated.ProductID : productCurrent.ProductID;
            productUpdated.BrandID = productUpdated.BrandID != 0 ? productUpdated.BrandID : productCurrent.BrandID;
            productUpdated.EstadoID = productUpdated.EstadoID != 0 ? productUpdated.EstadoID :  productCurrent.EstadoID;
            productUpdated.ProductName = productUpdated.ProductName != String.Empty && productUpdated.ProductName != null ? productUpdated.ProductName : productCurrent.ProductName;
            productUpdated.Sport = productUpdated.Sport != String.Empty && productUpdated.Sport != null ? productUpdated.Sport : productCurrent.Sport;
            productUpdated.Composition = productUpdated.Composition != String.Empty && productUpdated.Composition != null ? productUpdated.Composition : productCurrent.Composition;
            productUpdated.Colour = productUpdated.Colour != String.Empty && productUpdated.Colour != null ? productUpdated.Colour : productCurrent.Colour;
            productUpdated.ClientNumber = productUpdated.ClientNumber != 0 ? productUpdated.ClientNumber : productCurrent.ClientNumber;
            productUpdated.ProductType = productUpdated.ProductType != String.Empty && productUpdated.ProductType != null ? productUpdated.ProductType : productCurrent.ProductType;

            try
            {
                using (SqlConnection con = new SqlConnection(conString))
                {
                    string updateProduct = "UPDATE Product Set brandID = @brandID, estadoID = @estadoID, productName = @productName, sport = @sport, composition = @composition, colour = @colour, clientNumber = @clientNumber, productType = @productType";
                    using (SqlCommand queryUpdateProduct = new SqlCommand(updateProduct))
                    {
                        queryUpdateProduct.Connection = con;
                        queryUpdateProduct.Parameters.Add("@brandID", SqlDbType.Int).Value = productUpdated.BrandID;
                        queryUpdateProduct.Parameters.Add("@estadoID", SqlDbType.Int).Value = productUpdated.EstadoID;
                        queryUpdateProduct.Parameters.Add("productName", SqlDbType.Char).Value = productUpdated.ProductName;
                        queryUpdateProduct.Parameters.Add("@sport", SqlDbType.Char).Value = productUpdated.Sport;
                        queryUpdateProduct.Parameters.Add("@composition", SqlDbType.Char).Value = productUpdated.Composition;
                        queryUpdateProduct.Parameters.Add("@colour", SqlDbType.Char).Value = productUpdated.Colour;
                        queryUpdateProduct.Parameters.Add("@clientNumber", SqlDbType.Int).Value = productUpdated.ClientNumber;
                        queryUpdateProduct.Parameters.Add("@productType", SqlDbType.Char).Value = productUpdated.ProductType;
                        con.Open();
                        queryUpdateProduct.ExecuteNonQuery();
                        con.Close();
                        return await GetProduct(conString, productUpdated.ProductID);
                    }
                }
            }
            catch (Exception ex)
            {
                throw;
            }

Logic: 

 public static async Task<Response> UpdateProduct(string conString, Product productToUpdate)
        {
            Response response = new Response();
            try
            {
                Product productReturned = await ProductService.UpdateProduct(conString,productToUpdate);
                if(productReturned.ProductID == 0)
                {
                    response.StatusCode = StatusCodes.NOTFOUND;
                    response.Message = "Product was not found";
                }
                else
                {
                    response.StatusCode = StatusCodes.SUCCESS;
                    response.Message = "Product was updated";
                    response.Data = productReturned;
                }
            }
            catch(Exception ex)
            {
                response.StatusCode= StatusCodes.INTERNALSERVERERROR;
                response.Message = ex.ToString();
            }
            return response;
        }


Controller:

        public async Task<IActionResult> UpdateProduct(Product productToUpdate)
        {
            string CS = _configuration.GetConnectionString("WebApiDatabase");
            Response response = await ProductLogic.UpdateProduct(CS, productToUpdate);
            if (response.StatusCode != ComfyCatalogBLL.Utils.StatusCodes.SUCCESS)
            {
                return StatusCode((int)response.StatusCode);
            }
            return new JsonResult(response);
        }